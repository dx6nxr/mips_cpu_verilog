$date
	Sat Jun 17 17:27:10 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ProcessorTestbench $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module proc $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 $ writedata [31:0] $end
$var wire 32 % readdata [31:0] $end
$var wire 32 & pc [31:0] $end
$var wire 32 ' instr [31:0] $end
$var wire 1 ( datawrite $end
$var wire 32 ) dataaddr [31:0] $end
$scope module dmem $end
$var wire 6 * addr [5:0] $end
$var wire 1 ! clk $end
$var wire 32 + rd [31:0] $end
$var wire 1 ( we $end
$var wire 32 , wd [31:0] $end
$upscope $end
$scope module imem $end
$var wire 6 - addr [5:0] $end
$var wire 32 . rd [31:0] $end
$upscope $end
$scope module mips $end
$var wire 1 ! clk $end
$var wire 32 / instr [31:0] $end
$var wire 32 0 readdata [31:0] $end
$var wire 1 " reset $end
$var wire 1 1 zero $end
$var wire 32 2 writedata [31:0] $end
$var wire 1 3 regwrite $end
$var wire 32 4 pc [31:0] $end
$var wire 1 ( memwrite $end
$var wire 1 5 memtoreg $end
$var wire 1 6 dojump $end
$var wire 1 7 dobranch $end
$var wire 5 8 destreg [4:0] $end
$var wire 1 9 alusrcbimm $end
$var wire 32 : aluout [31:0] $end
$var wire 3 ; alucontrol [2:0] $end
$scope module decoder $end
$var wire 32 < instr [31:0] $end
$var wire 1 1 zero $end
$var wire 6 = op [5:0] $end
$var wire 6 > funct [5:0] $end
$var reg 3 ? alucontrol [2:0] $end
$var reg 1 9 alusrcbimm $end
$var reg 5 @ destreg [4:0] $end
$var reg 1 7 dobranch $end
$var reg 1 6 dojump $end
$var reg 1 5 memtoreg $end
$var reg 1 ( memwrite $end
$var reg 1 3 regwrite $end
$upscope $end
$scope module dp $end
$var wire 3 A alucontrol [2:0] $end
$var wire 1 9 alusrcbimm $end
$var wire 1 ! clk $end
$var wire 5 B destreg [4:0] $end
$var wire 1 7 dobranch $end
$var wire 32 C instr [31:0] $end
$var wire 1 6 jump $end
$var wire 1 5 memtoreg $end
$var wire 32 D readdata [31:0] $end
$var wire 1 3 regwrite $end
$var wire 1 " reset $end
$var wire 32 E writedata [31:0] $end
$var wire 1 1 zero $end
$var wire 32 F srcbimm [31:0] $end
$var wire 32 G srcb [31:0] $end
$var wire 32 H srca [31:0] $end
$var wire 32 I signimm [31:0] $end
$var wire 32 J result [31:0] $end
$var wire 32 K pc [31:0] $end
$var wire 32 L aluout [31:0] $end
$scope module alu $end
$var wire 3 M alucontrol [2:0] $end
$var wire 32 N b [31:0] $end
$var wire 32 O result [31:0] $end
$var wire 1 1 zero $end
$var wire 32 P a [31:0] $end
$var reg 32 Q RES [31:0] $end
$var reg 64 R hilo [63:0] $end
$upscope $end
$scope module gpr $end
$var wire 1 ! clk $end
$var wire 5 S ra1 [4:0] $end
$var wire 5 T ra2 [4:0] $end
$var wire 5 U wa3 [4:0] $end
$var wire 32 V wd3 [31:0] $end
$var wire 1 3 we3 $end
$var wire 32 W rd2 [31:0] $end
$var wire 32 X rd1 [31:0] $end
$upscope $end
$scope module pcenv $end
$var wire 1 ! clk $end
$var wire 1 7 dobranch $end
$var wire 1 6 dojump $end
$var wire 26 Y jumptarget [25:0] $end
$var wire 32 Z progcounter [31:0] $end
$var wire 1 " reset $end
$var wire 32 [ nextpc [31:0] $end
$var wire 32 \ incpc [31:0] $end
$var wire 32 ] branchpc [31:0] $end
$var wire 32 ^ branchoffset [31:0] $end
$var reg 32 _ pc [31:0] $end
$scope module pcbranch $end
$var wire 32 ` b [31:0] $end
$var wire 1 a cin $end
$var wire 32 b y [31:0] $end
$var wire 1 c cout $end
$var wire 32 d a [31:0] $end
$upscope $end
$scope module pcinc $end
$var wire 32 e a [31:0] $end
$var wire 32 f b [31:0] $end
$var wire 1 g cin $end
$var wire 32 h y [31:0] $end
$var wire 1 i cout $end
$upscope $end
$upscope $end
$scope module se $end
$var wire 16 j a [15:0] $end
$var wire 32 k y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1100100 k
b1100100 j
0i
b10000000000000000000100 h
0g
b100 f
b10000000000000000000000 e
b10000000000000000000100 d
0c
b10000000000000110010100 b
0a
b110010000 `
b10000000000000000000000 _
b1100100 ^
b10000000000000110010100 ]
b10000000000000000000100 \
b10000000000000000000100 [
b10000000000000000000000 Z
b10000100000000001100100 Y
b0 X
b0 W
b1100100 V
b10 U
b10 T
b10 S
bx R
b1100100 Q
b0 P
b1100100 O
b1100100 N
b1 M
b1100100 L
b10000000000000000000000 K
b1100100 J
b1100100 I
b0 H
b0 G
b1100100 F
b0 E
bx D
b110100010000100000000001100100 C
b10 B
b1 A
b10 @
b1 ?
b100100 >
b1101 =
b110100010000100000000001100100 <
b1 ;
b1100100 :
19
b10 8
07
06
05
b10000000000000000000000 4
13
b0 2
01
bx 0
b110100010000100000000001100100 /
b110100010000100000000001100100 .
b0 -
b0 ,
bx +
b11001 *
b1100100 )
0(
b110100010000100000000001100100 '
b10000000000000000000000 &
bx %
b0 $
b100000 #
1"
1!
$end
#2
0!
#4
b1100100 H
b1100100 P
b1100100 X
b1100100 $
b1100100 ,
b1100100 2
b1100100 E
b1100100 G
b1100100 W
1!
#5
0"
#6
0!
#8
b11101110 J
b11101110 V
b111011 *
b11101110 )
b11101110 :
b11101110 L
b11101110 O
b11101110 Q
b10000000000000000001000 [
b1110111000 `
b11101110 F
b11101110 N
b0 H
b0 P
b0 X
b0 $
b0 ,
b0 2
b0 E
b0 G
b0 W
b10000000000001111000000 ]
b10000000000001111000000 b
b11 8
b11 @
b11 B
b11 U
b101110 >
b11000110000000011101110 Y
b11101110 I
b11101110 ^
b11101110 k
b11101110 j
b11 S
b11 T
b10000000000000000001000 \
b10000000000000000001000 d
b10000000000000000001000 h
b110100011000110000000011101110 '
b110100011000110000000011101110 .
b110100011000110000000011101110 /
b110100011000110000000011101110 <
b110100011000110000000011101110 C
b1 -
b10000000000000000000100 &
b10000000000000000000100 4
b10000000000000000000100 K
b10000000000000000000100 Z
b10000000000000000000100 _
b10000000000000000000100 e
1!
#10
0!
#12
b10000000000000000001100 [
b1100100 `
b101110011111000 R
b10000000000000001110000 ]
b10000000000000001110000 b
b11 ;
b11 ?
b11 A
b11 M
09
b0 8
b0 @
b0 B
b0 U
b0 =
b11001 >
b10000110000000000011001 Y
b11001 I
b11001 ^
b11001 k
b11001 j
b10 S
b1100100 H
b1100100 P
b1100100 X
b11101110 $
b11101110 ,
b11101110 2
b11101110 E
b11101110 G
b11101110 W
b10000000000000000001100 \
b10000000000000000001100 d
b10000000000000000001100 h
b10000110000000000011001 '
b10000110000000000011001 .
b10000110000000000011001 /
b10000110000000000011001 <
b10000110000000000011001 C
b10 -
b10000000000000000001000 &
b10000000000000000001000 4
b10000000000000000001000 K
b10000000000000000001000 Z
b10000000000000000001000 _
b10000000000000000001000 e
1!
#14
0!
#16
11
b0 J
b0 V
b0 *
b0 F
b0 N
b10000000000000000010000 [
b0 )
b0 :
b0 L
b0 O
b0 Q
b100000001000000 `
b0 H
b0 P
b0 X
b0 $
b0 ,
b0 2
b0 E
b0 G
b0 W
b10000000100000001010000 ]
b10000000100000001010000 b
b100 ;
b100 ?
b100 A
b100 M
b10 8
b10 @
b10 B
b10 U
b10000 >
b1000000010000 Y
b1000000010000 I
b1000000010000 ^
b1000000010000 k
b1000000010000 j
b0 S
b0 T
b10000000000000000010000 \
b10000000000000000010000 d
b10000000000000000010000 h
b1000000010000 '
b1000000010000 .
b1000000010000 /
b1000000010000 <
b1000000010000 C
b11 -
b10000000000000000001100 &
b10000000000000000001100 4
b10000000000000000001100 K
b10000000000000000001100 Z
b10000000000000000001100 _
b10000000000000000001100 e
1!
#18
0!
#20
b101110011111000 J
b101110011111000 V
b111110 *
b10000000000000000010100 [
01
b101110011111000 )
b101110011111000 :
b101110011111000 L
b101110011111000 O
b101110011111000 Q
b1000000001001000 `
b10000001000000001011100 ]
b10000001000000001011100 b
b101 ;
b101 ?
b101 A
b101 M
b100 8
b100 @
b100 B
b100 U
b10010 >
b10000000010010 Y
b10000000010010 I
b10000000010010 ^
b10000000010010 k
b10000000010010 j
b10000000000000000010100 \
b10000000000000000010100 d
b10000000000000000010100 h
b10000000010010 '
b10000000010010 .
b10000000010010 /
b10000000010010 <
b10000000010010 C
b100 -
b10000000000000000010000 &
b10000000000000000010000 4
b10000000000000000010000 K
b10000000000000000010000 Z
b10000000000000000010000 _
b10000000000000000010000 e
1!
#22
0!
#24
xc
bx [
bx J
bx V
bx F
bx N
bx00 `
bx H
bx P
bx X
bx $
bx ,
bx 2
bx E
bx G
bx W
bx ]
bx b
x6
x5
x(
x7
x9
bx 8
bx @
bx B
bx U
x3
bx =
bx >
bx Y
bx I
bx ^
bx k
bx j
bx S
bx T
b10000000000000000011000 \
b10000000000000000011000 d
b10000000000000000011000 h
bx '
bx .
bx /
bx <
bx C
b101 -
b10000000000000000010100 &
b10000000000000000010100 4
b10000000000000000010100 K
b10000000000000000010100 Z
b10000000000000000010100 _
b10000000000000000010100 e
1!
#26
0!
#28
bx \
bx d
bx h
xi
bx -
bx &
bx 4
bx K
bx Z
bx _
bx e
1!
#30
0!
#32
1!
#34
0!
#36
1!
#38
0!
#40
1!
#42
0!
#44
1!
#46
0!
#48
1!
#50
0!
#52
1!
#54
0!
#56
1!
#58
0!
#60
1!
#62
0!
#64
1!
#66
0!
#68
1!
#70
0!
#72
1!
#74
0!
#76
1!
#78
0!
#80
1!
#82
0!
#84
1!
#86
0!
#88
1!
#90
0!
#92
1!
#94
0!
#96
1!
#98
0!
#100
1!
#102
0!
#104
1!
#106
0!
#108
1!
#110
0!
#112
1!
#114
0!
#116
1!
#118
0!
#120
1!
#122
0!
b100000 #
