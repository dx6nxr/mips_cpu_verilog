$date
	Sat Jun 17 20:07:15 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ProcessorTestbench $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module proc $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 $ writedata [31:0] $end
$var wire 32 % readdata [31:0] $end
$var wire 32 & pc [31:0] $end
$var wire 32 ' instr [31:0] $end
$var wire 1 ( datawrite $end
$var wire 32 ) dataaddr [31:0] $end
$scope module dmem $end
$var wire 6 * addr [5:0] $end
$var wire 1 ! clk $end
$var wire 32 + rd [31:0] $end
$var wire 1 ( we $end
$var wire 32 , wd [31:0] $end
$upscope $end
$scope module imem $end
$var wire 6 - addr [5:0] $end
$var wire 32 . rd [31:0] $end
$upscope $end
$scope module mips $end
$var wire 1 ! clk $end
$var wire 32 / instr [31:0] $end
$var wire 32 0 readdata [31:0] $end
$var wire 1 " reset $end
$var wire 1 1 zero $end
$var wire 32 2 writedata [31:0] $end
$var wire 2 3 regwrite [1:0] $end
$var wire 32 4 pc [31:0] $end
$var wire 1 ( memwrite $end
$var wire 1 5 memtoreg $end
$var wire 1 6 dojump $end
$var wire 1 7 dobranch $end
$var wire 5 8 destreg [4:0] $end
$var wire 1 9 alusrcbimm $end
$var wire 32 : aluout [31:0] $end
$var wire 4 ; alucontrol [3:0] $end
$scope module decoder $end
$var wire 32 < instr [31:0] $end
$var wire 1 1 zero $end
$var wire 6 = op [5:0] $end
$var wire 6 > funct [5:0] $end
$var reg 4 ? alucontrol [3:0] $end
$var reg 1 9 alusrcbimm $end
$var reg 5 @ destreg [4:0] $end
$var reg 1 7 dobranch $end
$var reg 1 6 dojump $end
$var reg 1 5 memtoreg $end
$var reg 1 ( memwrite $end
$var reg 2 A regwrite [1:0] $end
$upscope $end
$scope module dp $end
$var wire 4 B alucontrol [3:0] $end
$var wire 1 9 alusrcbimm $end
$var wire 1 ! clk $end
$var wire 5 C destreg [4:0] $end
$var wire 1 7 dobranch $end
$var wire 32 D instr [31:0] $end
$var wire 1 6 jump $end
$var wire 1 5 memtoreg $end
$var wire 32 E readdata [31:0] $end
$var wire 2 F regwrite [1:0] $end
$var wire 1 " reset $end
$var wire 32 G writedata [31:0] $end
$var wire 1 1 zero $end
$var wire 32 H srcbimm [31:0] $end
$var wire 32 I srcb [31:0] $end
$var wire 32 J srca [31:0] $end
$var wire 32 K signimm [31:0] $end
$var wire 32 L result [31:0] $end
$var wire 32 M pc [31:0] $end
$var wire 32 N aluout [31:0] $end
$scope module alu $end
$var wire 4 O alucontrol [3:0] $end
$var wire 32 P b [31:0] $end
$var wire 32 Q result [31:0] $end
$var wire 1 1 zero $end
$var wire 32 R a [31:0] $end
$var reg 32 S RES [31:0] $end
$var reg 64 T hilo [63:0] $end
$upscope $end
$scope module gpr $end
$var wire 1 ! clk $end
$var wire 5 U ra1 [4:0] $end
$var wire 5 V ra2 [4:0] $end
$var wire 5 W wa3 [4:0] $end
$var wire 32 X wd3 [31:0] $end
$var wire 2 Y we3 [1:0] $end
$var wire 32 Z rd2 [31:0] $end
$var wire 32 [ rd1 [31:0] $end
$var wire 32 \ pc [31:0] $end
$var reg 32 ] pcreg [31:0] $end
$upscope $end
$scope module pcenv $end
$var wire 1 ! clk $end
$var wire 1 7 dobranch $end
$var wire 1 6 dojump $end
$var wire 26 ^ jumptarget [25:0] $end
$var wire 32 _ progcounter [31:0] $end
$var wire 1 " reset $end
$var wire 32 ` nextpc [31:0] $end
$var wire 32 a incpc [31:0] $end
$var wire 32 b branchpc [31:0] $end
$var wire 32 c branchoffset [31:0] $end
$var reg 32 d pc [31:0] $end
$scope module pcbranch $end
$var wire 32 e b [31:0] $end
$var wire 1 f cin $end
$var wire 32 g y [31:0] $end
$var wire 1 h cout $end
$var wire 32 i a [31:0] $end
$upscope $end
$scope module pcinc $end
$var wire 32 j a [31:0] $end
$var wire 32 k b [31:0] $end
$var wire 1 l cin $end
$var wire 32 m y [31:0] $end
$var wire 1 n cout $end
$upscope $end
$upscope $end
$scope module se $end
$var wire 16 o a [15:0] $end
$var wire 32 p y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11 p
b11 o
0n
b10000000000000000000100 m
0l
b100 k
b10000000000000000000000 j
b10000000000000000000100 i
0h
b10000000000000000010000 g
0f
b1100 e
b10000000000000000000000 d
b11 c
b10000000000000000010000 b
b10000000000000000000100 a
b10000000000000000001100 `
b10000000000000000000000 _
b100000000000000000011 ^
b10000000000000000000100 ]
b10000000000000000000000 \
b0 [
b0 Z
b10 Y
b0 X
b11111 W
b10000 V
b0 U
bx T
b0 S
b0 R
b0 Q
b11 P
bx O
b0 N
b10000000000000000000000 M
b0 L
b11 K
b0 J
b0 I
b11 H
b0 G
b10 F
bx E
b1100000100000000000000000011 D
b11111 C
bx B
b10 A
b11111 @
bx ?
b11 >
b11 =
b1100000100000000000000000011 <
bx ;
b0 :
19
b11111 8
07
16
05
b10000000000000000000000 4
b10 3
b0 2
11
bx 0
b1100000100000000000000000011 /
b1100000100000000000000000011 .
b0 -
b0 ,
bx +
b0 *
b0 )
0(
b1100000100000000000000000011 '
b10000000000000000000000 &
bx %
b0 $
b100000 #
1"
1!
$end
#2
0!
#4
1!
#5
0"
#6
0!
#8
b1111011 L
b1111011 X
b11110 *
01
b1111011 )
b1111011 :
b1111011 N
b1111011 Q
b1111011 S
b10000000000000000010000 `
b111101100 e
b1111011 H
b1111011 P
b10000000000000111111100 b
b10000000000000111111100 g
b10 ;
b10 ?
b10 B
b10 O
06
b101 8
b101 @
b101 C
b101 W
b1 3
b1 A
b1 F
b1 Y
b1001 =
b111011 >
b1010000000001111011 ^
b1111011 K
b1111011 c
b1111011 p
b1111011 o
b101 V
b10000000000000000010000 a
b10000000000000000010000 i
b10000000000000000010000 m
b100100000001010000000001111011 '
b100100000001010000000001111011 .
b100100000001010000000001111011 /
b100100000001010000000001111011 <
b100100000001010000000001111011 D
b11 -
b10000000000000000010000 ]
b10000000000000000001100 &
b10000000000000000001100 4
b10000000000000000001100 M
b10000000000000000001100 \
b10000000000000000001100 _
b10000000000000000001100 d
b10000000000000000001100 j
1!
#10
0!
#12
b0 L
b0 X
b0 *
11
b0 )
b0 :
b0 N
b0 Q
b0 S
b1111100000000000000000100000 `
b100000 e
b0 H
b0 P
b10000000000000000000100 J
b10000000000000000000100 R
b10000000000000000000100 [
b10000000000000000110100 b
b10000000000000000110100 g
bx ;
bx ?
bx B
bx O
16
09
b11111 8
b11111 @
b11111 C
b11111 W
b0 3
b0 A
b0 F
b0 Y
b0 =
b1000 >
b11111000000000000000001000 ^
b1000 K
b1000 c
b1000 p
b1000 o
b11111 U
b0 V
b0 $
b0 ,
b0 2
b0 G
b0 I
b0 Z
b10000000000000000010100 a
b10000000000000000010100 i
b10000000000000000010100 m
b11111000000000000000001000 '
b11111000000000000000001000 .
b11111000000000000000001000 /
b11111000000000000000001000 <
b11111000000000000000001000 D
b100 -
b10000000000000000010100 ]
b10000000000000000010000 &
b10000000000000000010000 4
b10000000000000000010000 M
b10000000000000000010000 \
b10000000000000000010000 _
b10000000000000000010000 d
b10000000000000000010000 j
1!
#14
0!
#16
xh
bx L
bx X
bx H
bx P
bx `
bx00 e
bx J
bx R
bx [
bx $
bx ,
bx 2
bx G
bx I
bx Z
bx b
bx g
x6
x5
x(
x7
x9
bx 8
bx @
bx C
bx W
bx 3
bx A
bx F
bx Y
bx =
bx >
bx ^
bx K
bx c
bx p
bx o
bx U
bx V
b1111100000000000000000100100 a
b1111100000000000000000100100 i
b1111100000000000000000100100 m
bx '
bx .
bx /
bx <
bx D
b1000 -
b1111100000000000000000100100 ]
b1111100000000000000000100000 &
b1111100000000000000000100000 4
b1111100000000000000000100000 M
b1111100000000000000000100000 \
b1111100000000000000000100000 _
b1111100000000000000000100000 d
b1111100000000000000000100000 j
1!
#18
0!
#20
bx a
bx i
bx m
xn
bx -
bx ]
bx &
bx 4
bx M
bx \
bx _
bx d
bx j
1!
#22
0!
#24
1!
#26
0!
#28
1!
#30
0!
#32
1!
#34
0!
#36
1!
#38
0!
#40
1!
#42
0!
#44
1!
#46
0!
#48
1!
#50
0!
#52
1!
#54
0!
#56
1!
#58
0!
#60
1!
#62
0!
#64
1!
#66
0!
#68
1!
#70
0!
#72
1!
#74
0!
#76
1!
#78
0!
#80
1!
#82
0!
#84
1!
#86
0!
#88
1!
#90
0!
#92
1!
#94
0!
#96
1!
#98
0!
#100
1!
#102
0!
#104
1!
#106
0!
#108
1!
#110
0!
#112
1!
#114
0!
#116
1!
#118
0!
#120
1!
#122
0!
b110 #
